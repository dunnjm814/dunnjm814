/*! markdown-it-modify-token 1.0.0 https://github.com/jeffbski/markdown-it-modify-token @license MIT */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.markdownitModifyToken = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function modifyToken(token, modifyFn, env) {
  // create attrObj for convenient get/set of attributes
  var attrObj = (token.attrs) ? token.attrs.reduce(function (acc, pair) {
    acc[pair[0]] = pair[1];
    return acc;
  }, {}) : {};
  token.attrObj = attrObj;
  modifyFn(token, env);
  // apply any overrides or new attributes from attrObj
  Object.keys(token.attrObj).forEach(function (k) {
    token.attrSet(k, token.attrObj[k]);
  });
}

function noop() { }

module.exports = function (md) {
    md.core.ruler.after(
        'inline',
        'modify-token',
        function (state) {
          var modifyFn = md.options.modifyToken || noop;
          state.tokens.forEach(function (token) {
            if (token.children && token.children.length) {
              token.children.forEach(function (token) {
                modifyToken(token, modifyFn, state.env);
              });
            }
            modifyToken(token, modifyFn, state.env);
          });
          return false;
        }
    );
};

},{}]},{},[1])(1)
});